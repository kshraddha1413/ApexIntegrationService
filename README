**Apex REST Callouts**
public class AnimalLocator {
    public static String getAnimalNameById(Integer Id){
        System.debug('ID:'+Id);
        Http http = new Http();
        HttpRequest request = new HttpRequest();
        request.setEndpoint('https://th-apex-http-callout.herokuapp.com/animals/' + Id);
        request.setMethod('GET');
        HttpResponse response = http.send(request);
        String name ='';
        system.debug('******response '+response.getStatusCode());
        system.debug('******response '+response.getBody());

        if (response.getStatusCode() == 200) {
            // Deserializes the JSON string into collections of primitive data types.
            Map<String, Object> results = (Map<String, Object>) JSON.deserializeUntyped(response.getBody());
            // Cast the values in the 'animals' key as a list
            Map<string,object> animals = (map<string,object>) results.get('animal');

            system.debug(animals.size());
            System.debug('Received the following animal:' + animals);
            name = string.valueOf(animals.get('name'));
            System.debug('animalname :' +  name);
            
        }
        return name;
        
    }

}

*************************

@isTest
global class AnimalLocatorMock implements HttpCalloutMock {
    // Implement this interface method
    global HTTPResponse respond(HTTPRequest request) {
        // Create a fake response
        HttpResponse response = new HttpResponse();
        response.setHeader('Content-Type', 'application/json');
        response.setBody('{"animal": {"id":1,"name":"chicken","eats":"chicken food","says":"cluck cluck"}}');
        response.setStatusCode(200);
        return response; 
    }
}



****************************
@isTest
private class AnimalLocatorTest {
    @isTest static  void testAnimalLocatorMock() {
        Test.SetMock(HttpCallOutMock.class, new AnimalLocatorMock());
        String result=AnimalLocator.getAnimalNameById(1);
        System.debug('Result:' + result);
        String expectedResult='chicken';
        System.assertEquals(result, expectedResult);
    }
}
|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
**Apex Soap Callout challenge**

public class ParkLocator {
    public static String[] country(String ctr){
        ParkService.ParksImplPort prk = new ParkService.ParksImplPort();
        return prk.byCountry(ctr);
    }
}



@isTest
global class ParkServiceMock  implements WebServiceMock{
     global void doInvoke(
           Object stub,
           Object request,
           Map<String, Object> response,
           String endpoint,
           String soapAction,
           String requestName,
           String responseNS,
           String responseName,
           String responseType) {
               ParkService.byCountryResponse response_x = new ParkService.byCountryResponse();
               List<String> parkList = new List<String> {'Park1','Park2','Park3'};
                   response_x.return_x = parkList;
               response.put('response_x', response_x); 
              
               
                   }
}




@isTest
private class ParkLocatorTest {
    @isTest static void testCallout() {
        Test.setMock(WebServiceMock.class, new ParkServiceMock());
        List<String> result = new List<String>();
        List<String> expectedList = new List<String> {'Park1','Park2','Park3'};
            result = ParkLocator.country('India');
        System.assertEquals(expectedList, result);
        
    }

}

***************************************************************************
**Apex Web Service**
**Create an Apex REST service that returns an account and it's contacts.**
To pass this challenge, create an Apex REST class that is accessible at '/Accounts/<Account_ID>/contacts'. The service will return the account's ID and Name plus the ID and Name of all contacts associated with the account. Write unit tests that achieve 100% code coverage for the class and run your Apex tests.
The Apex class must be called 'AccountManager'.
The Apex class must have a method called 'getAccount' that is annotated with @HttpGet and returns an Account object.
The method must return the ID and Name for the requested record and all associated contacts with their ID and Name.
The unit tests must be in a separate Apex class called 'AccountManagerTest'.
The unit tests must cover all lines of code included in the AccountManager class, resulting in 100% code coverage.
Run your test class at least once (via 'Run All' tests the Developer Console) before attempting to verify this challenge.




